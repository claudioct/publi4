@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>@@ViewBag.PageTitle</h2>
        <ol class="breadcrumb">
            <li>
                @@Html.ActionLink("Lista", "Index")
            </li>
            <li class="active">
                <strong>Editar</strong>
            </li>
        </ol>
    </div>
    <div class="col-sm-8">
        <div class="title-action">
            @@Html.ActionLink("Voltar", "Index", null, new { @@class = "btn btn-primary" })
        </div>
    </div>
</div>

@:<div class="wrapper wrapper-content animated fadeInRight">
    @:<div class="row">
        @:<div class="col-lg-12">
            @:<div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Editar @@ViewBag.ContentName</h5>
                </div>
                @:<div class="ibox-content">
                    @:<form asp-action="@Model.ViewName" id="inputForm">
                        @:<div class="form-horizontal">
							<input type="hidden" asp-for="CreationDate" />
                            <input type="hidden" asp-for="CreationUserId" />
							
                            @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        foreach (PropertyMetadata property in Model.ModelMetadata.Properties)
                        {
                            if (property.IsPrimaryKey)
                            {
                        @:<input type="hidden" asp-for="@property.PropertyName" />
                                continue;
                            }

                            if (property.Scaffold)
                            {
                                if (property.IsReadOnly)
                                {
                                    continue;
                                }

                                if (property.IsForeignKey)
                                {
                            @:<div class="form-group">
                                @:<label asp-for="@property.PropertyName" class="control-label col-md-2"></label>
                                @:<div class="col-md-10">
                                    @:<select asp-for="@property.PropertyName" class="form-control" asp-items="ViewBag.@property.PropertyName"></select>
                                    @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                @:</div>
                            @:</div>
                                    continue;
                                }

                                bool isCheckbox = property.TypeName.Equals("System.Boolean");
                                if (isCheckbox)
                                {
                            @:<div class="form-group">
                                @:<div class="col-md-offset-2 col-md-10">
                                    @:<div class="checkbox">
                                        @:<input asp-for="@property.PropertyName" />
                                        @:<label asp-for="@property.PropertyName"></label>
                                    @:</div>
                                @:</div>
                            @:</div>
                                }
                                else if (property.IsEnum && !property.IsEnumFlags)
                                {
                            @:<div class="form-group">
                                @:<label asp-for="@property.PropertyName" class="col-md-2 control-label"></label>
                                @:<div class="col-md-10">
                                    @:<select asp-for="@property.PropertyName" class="form-control"></select>
                                    @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                @:</div>
                            @:</div>
                                }
                                else
                                {
                            @:<div class="form-group">
                                @:<label asp-for="@property.PropertyName" class="col-md-2 control-label"></label>
                                @:<div class="col-md-10">
                                    @:<input asp-for="@property.PropertyName" class="form-control" />
                                    @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                @:</div>
                            @:</div>
                                }
                            }
                            // Ideally we shouldn't be here  but if the user marks the foreign key as [ScaffoldColumn(false)], we want to atleast try to make it work.
                            else if (property.IsForeignKey)
                            {
                        @:<input type="hidden" asp-for="@property.PropertyName" />
                                continue;
                            }
                        }
                    }
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <button class="btn btn-primary ladda-button" data-style="zoom-in">Salvar</button>
                                </div>
                            </div>
                        </div>
                    </form>                    
                </div>
                <!-- Fim box form -->
            </div>
        </div>
    </div>
</div>

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    string GetAssociationName(PropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }
}
